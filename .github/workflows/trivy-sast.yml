name: trivy-sast

on:
  workflow_call:
    inputs:
      scan-ref:
        description: Caminho alvo do scan.
        type: string
        default: .
      severity:
        description: Severidades a serem consideradas.
        type: string
        default: CRITICAL,HIGH
      vuln-type:
        description: Tipos de vulnerabilidade (os,library).
        type: string
        default: library
      scanners:
        description: Scanners habilitados (vuln,secret,misconfig).
        type: string
        default: vuln,secret,misconfig
      ignore-unfixed:
        description: Ignorar vulnerabilidades sem correção.
        type: boolean
        default: true
      exit-on-vulnerability:
        description: Falhar o job ao encontrar vulnerabilidade.
        type: boolean
        default: true
      output-format:
        description: Formato do relatório (sarif, sarif-template, json, table).
        type: string
        default: sarif
      hide-progress:
        description: Ocultar barra de progresso.
        type: boolean
        default: true
      upload-sarif:
        description: Publicar SARIF na aba Security.
        type: boolean
        default: true
      publish-summary:
        description: Publicar resumo no GITHUB_STEP_SUMMARY.
        type: boolean
        default: true
      pr-report:
        description: Comentar resultado no PR.
        type: boolean
        default: false
      fail-on-severity:
        description: Severidades que geram falha no PR report.
        type: string
        default: CRITICAL,HIGH
    secrets:
      github-token:
        required: false

permissions:
  contents: read
  security-events: write

jobs:
  trivy-sast:
    name: Trivy SAST
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    env:
      TRIVY_RESULTS_FILE: ${{ (inputs['output-format'] == 'sarif-template' || inputs['output-format'] == 'sarif') && 'trivy-sast.sarif' || inputs['output-format'] == 'json' && 'trivy-sast.json' || 'trivy-sast.txt' }}
      TRIVY_PR_REPORT_FILE: ${{ inputs['output-format'] == 'table' && 'trivy-sast.txt' || 'trivy-sast-pr.txt' }}
      GITHUB_TOKEN: ${{ secrets.github-token || github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Trivy SAST (template)
        if: ${{ inputs['output-format'] == 'sarif-template' }}
        id: trivy-sast-template
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs['scan-ref'] }}
          format: template
          template: "@/contrib/sarif.tpl"
          output: ${{ env.TRIVY_RESULTS_FILE }}
          scanners: ${{ inputs.scanners }}
          vuln-type: ${{ inputs['vuln-type'] }}
          ignore-unfixed: ${{ inputs['ignore-unfixed'] && 'true' || 'false' }}
          severity: ${{ inputs.severity }}
          exit-code: 0
          hide-progress: ${{ inputs['hide-progress'] && 'true' || 'false' }}

      - name: Trivy SAST
        if: ${{ inputs['output-format'] != 'sarif-template' }}
        id: trivy-sast
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs['scan-ref'] }}
          format: ${{ inputs['output-format'] }}
          output: ${{ env.TRIVY_RESULTS_FILE }}
          scanners: ${{ inputs.scanners }}
          vuln-type: ${{ inputs['vuln-type'] }}
          ignore-unfixed: ${{ inputs['ignore-unfixed'] && 'true' || 'false' }}
          severity: ${{ inputs.severity }}
          exit-code: 0
          hide-progress: ${{ inputs['hide-progress'] && 'true' || 'false' }}

      - name: Trivy SAST (Tabela para PR)
        if: ${{ inputs['pr-report'] && inputs['output-format'] != 'table' }}
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs['scan-ref'] }}
          format: table
          output: ${{ env.TRIVY_PR_REPORT_FILE }}
          scanners: ${{ inputs.scanners }}
          vuln-type: ${{ inputs['vuln-type'] }}
          ignore-unfixed: ${{ inputs['ignore-unfixed'] && 'true' || 'false' }}
          severity: ${{ inputs.severity }}
          hide-progress: ${{ inputs['hide-progress'] && 'true' || 'false' }}
          exit-code: 0

      - name: Trivy SAST (JSON para DefectDojo)
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs['scan-ref'] }}
          format: json
          output: trivy-sast.json
          scanners: ${{ inputs.scanners }}
          vuln-type: ${{ inputs['vuln-type'] }}
          ignore-unfixed: ${{ inputs['ignore-unfixed'] && 'true' || 'false' }}
          severity: ${{ inputs.severity }}
          hide-progress: ${{ inputs['hide-progress'] && 'true' || 'false' }}
          exit-code: 0

      - name: Preparar recursos no DefectDojo
        if: ${{ always() }}
        id: dojo-setup
        env:
          DEFECTDOJO_BASE_URL: http://18.210.28.169:8080
          DEFECTDOJO_TOKEN: 75e7a2b85f58f48ea3eee1c72a28a492d36f6c00
          DEFECTDOJO_PRODUCT_TYPE_ID: 1
        run: |
          set -euo pipefail

          AUTH_HEADER="Authorization: Token ${DEFECTDOJO_TOKEN}"
          BASE_URL="${DEFECTDOJO_BASE_URL}"
          REPO_FULL="${GITHUB_REPOSITORY}"
          REPO_NAME="${REPO_FULL#*/}"
          PRODUCT_NAME="${REPO_NAME}"
          ENGAGEMENT_NAME="${REPO_NAME}"
          TEST_TITLE="Trivy SAST (GitHub Actions)"
          TARGET_START=$(date -u +"%Y-%m-%d")
          TARGET_END=$(date -u -d "+7 days" +"%Y-%m-%d")

          echo "Buscando produto '${PRODUCT_NAME}'"
          product_resp=$(curl -sS -G "${BASE_URL}/api/v2/products/" \
            --data-urlencode "name=${PRODUCT_NAME}" \
            -H "${AUTH_HEADER}")
          product_id=$(echo "${product_resp}" | jq '.results[] | select(.name == "'"${PRODUCT_NAME}"'") | .id' | head -n 1)

          if [[ -z "${product_id}" ]]; then
            echo "Criando produto '${PRODUCT_NAME}'"
            product_payload=$(jq -n \
              --arg name "${PRODUCT_NAME}" \
              --arg description "Criado automaticamente a partir do repositório ${REPO_FULL}" \
              --argjson product_type ${DEFECTDOJO_PRODUCT_TYPE_ID:-1} \
              '{name: $name, description: $description, product_type: $product_type}')
            product_id=$(curl -sS -X POST "${BASE_URL}/api/v2/products/" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: application/json" \
              -d "${product_payload}" | jq '.id')
          else
            echo "Produto existente (id=${product_id})"
          fi

          echo "Buscando engagement '${ENGAGEMENT_NAME}'"
          engagement_resp=$(curl -sS -G "${BASE_URL}/api/v2/engagements/" \
            --data-urlencode "product=${product_id}" \
            -H "${AUTH_HEADER}")
          engagement_id=$(echo "${engagement_resp}" | jq '.results[] | select(.product == '"${product_id}"' and .name == "'"${ENGAGEMENT_NAME}"'") | .id' | head -n 1)

          if [[ -z "${engagement_id}" ]]; then
            echo "Criando engagement '${ENGAGEMENT_NAME}'"
            engagement_payload=$(jq -n \
              --arg name "${ENGAGEMENT_NAME}" \
              --arg status "In Progress" \
              --arg target_start "${TARGET_START}" \
              --arg target_end "${TARGET_END}" \
              --arg engagement_type "CI/CD" \
              --arg description "Engagement de CI/CD criado automaticamente" \
              --argjson product "${product_id}" \
              '{name:$name, product:$product, status:$status, target_start:$target_start, target_end:$target_end, engagement_type:$engagement_type, description:$description, deduplication_on_engagement:true, close_old_findings:true}')
            engagement_id=$(curl -sS -X POST "${BASE_URL}/api/v2/engagements/" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: application/json" \
              -d "${engagement_payload}" | jq '.id')
          else
            echo "Engagement existente (id=${engagement_id}), atualizando target_end para ${TARGET_END}"
            update_payload=$(jq -n --arg target_end "${TARGET_END}" '{target_end:$target_end}')
            curl -sS -X PATCH "${BASE_URL}/api/v2/engagements/${engagement_id}/" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: application/json" \
              -d "${update_payload}" >/dev/null
          fi

          echo "Buscando Test '${TEST_TITLE}'"
          test_resp=$(curl -sS -G "${BASE_URL}/api/v2/tests/" \
            --data-urlencode "engagement=${engagement_id}" \
            --data-urlencode "title=${TEST_TITLE}" \
            -H "${AUTH_HEADER}")
          test_id=$(echo "${test_resp}" | jq '.results[] | select(.title == "'"${TEST_TITLE}"'") | .id' | head -n 1)

          {
            echo "product_id=${product_id}"
            echo "engagement_id=${engagement_id}"
            echo "test_title=${TEST_TITLE}"
            if [[ -n "${test_id}" ]]; then
              echo "test_id=${test_id}"
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Upload Trivy SAST para DefectDojo
        if: ${{ always() }}
        env:
          DEFECTDOJO_BASE_URL: http://18.210.28.169:8080
          DEFECTDOJO_TOKEN: 75e7a2b85f58f48ea3eee1c72a28a492d36f6c00
        run: |
          if [[ ! -s trivy-sast.json ]]; then
            echo "Arquivo trivy-sast.json não encontrado ou vazio; pulando upload."
            exit 0
          fi

          BASE_URL="${DEFECTDOJO_BASE_URL}"
          AUTH_HEADER="Authorization: Token ${DEFECTDOJO_TOKEN}"
          ENGAGEMENT_ID="${{ steps.dojo-setup.outputs.engagement_id }}"
          TEST_ID="${{ steps.dojo-setup.outputs.test_id }}"
          TEST_TITLE="${{ steps.dojo-setup.outputs.test_title }}"
          SCAN_DATE=$(date -u +"%Y-%m-%d")
          SCAN_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          if [[ -n "${TEST_ID}" ]]; then
            echo "Reimportando scan no Test ID ${TEST_ID}"
            curl -sS -X POST "${BASE_URL}/api/v2/reimport-scan/" \
              -H "${AUTH_HEADER}" \
              -F "scan_type=Trivy Scan" \
              -F "test=${TEST_ID}" \
              -F "close_old_findings=true" \
              -F "minimum_severity=Low" \
              -F "scan_date=${SCAN_DATE}" \
              -F "version=${SCAN_TIMESTAMP}" \
              -F "file=@trivy-sast.json;type=application/json"
          else
            echo "Nenhum Test encontrado, realizando import-scan para engajamento ${ENGAGEMENT_ID}"
            curl -sS -X POST "${BASE_URL}/api/v2/import-scan/" \
              -H "${AUTH_HEADER}" \
              -F "scan_type=Trivy Scan" \
              -F "engagement=${ENGAGEMENT_ID}" \
              -F "active=true" \
              -F "verified=false" \
              -F "test_title=${TEST_TITLE}" \
              -F "minimum_severity=Low" \
              -F "close_old_findings=true" \
              -F "deduplication_on_engagement=true" \
              -F "scan_date=${SCAN_DATE}" \
              -F "version=${SCAN_TIMESTAMP}" \
              -F "file=@trivy-sast.json;type=application/json"
          fi

      - name: Upload SARIF
        if: ${{ always() && inputs['upload-sarif'] && (inputs['output-format'] == 'sarif' || inputs['output-format'] == 'sarif-template') }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TRIVY_RESULTS_FILE }}

      - name: Publicar resumo
        if: ${{ always() && inputs['publish-summary'] }}
        run: |
          if [[ -f "${TRIVY_RESULTS_FILE}" ]]; then
            echo "### Trivy SAST" >> "$GITHUB_STEP_SUMMARY"
            if [[ "${TRIVY_RESULTS_FILE}" == *.sarif ]]; then
              findings=$(jq '
                def norm($v):
                  if $v == null or ($v | tostring | length) == 0 then empty
                  else
                    (try ($v | tonumber) catch null) as $n
                    | if $n != null then
                        if $n >= 9 then "CRITICAL"
                        elif $n >= 7 then "HIGH"
                        elif $n >= 4 then "MEDIUM"
                        elif $n > 0 then "LOW"
                        else "UNKNOWN"
                        end
                      else
                        ($v | tostring | ascii_upcase)
                      end
                  end;
                def severity($r):
                  (
                    [
                      $r.properties.severity,
                      $r.rule.properties.severity,
                      $r.properties["security-severity"],
                      $r.rule.properties["security-severity"],
                      ($r.properties.tags[]? | select(test("^severity", "i")) | split(":")[1]?),
                      ($r.rule.properties.tags[]? | select(test("^severity", "i")) | split(":")[1]?),
                      $r.level
                    ]
                    | map(norm(.))
                    | map(select(. != null and . != ""))
                    | .[0]
                  ) // "UNKNOWN";
                [.runs[].results[] | {ruleId, severity: severity(.), file: (.locations[0].physicalLocation.artifactLocation.uri // "N/A")}]
              ' "${TRIVY_RESULTS_FILE}")
              if [[ "${findings}" == "[]" ]]; then
                echo "- Nenhuma vulnerabilidade encontrada." >> "$GITHUB_STEP_SUMMARY"
              else
                echo "- Vulnerabilidades identificadas:" >> "$GITHUB_STEP_SUMMARY"
                echo '```json' >> "$GITHUB_STEP_SUMMARY"
                echo "${findings}" >> "$GITHUB_STEP_SUMMARY"
                echo '```' >> "$GITHUB_STEP_SUMMARY"
              fi
            else
              echo '```' >> "$GITHUB_STEP_SUMMARY"
              cat "${TRIVY_RESULTS_FILE}" >> "$GITHUB_STEP_SUMMARY"
              echo '```' >> "$GITHUB_STEP_SUMMARY"
            fi
          fi

      - name: Avaliar vulnerabilidades
        id: analyze-findings
        run: |
          file="${TRIVY_RESULTS_FILE}"
          findings=0
          if [[ "$file" == *.sarif ]]; then
            findings=$(jq '[.runs[].results[]] | length' "$file")
          elif [[ "$file" == *.json ]]; then
            findings=$(jq '[.Results[]?.Vulnerabilities[]?] | length' "$file")
          else
            findings=$(grep -E "CRITICAL|HIGH|MEDIUM|LOW" -c "$file" || true)
          fi
          echo "count=$findings" >> "$GITHUB_OUTPUT"

      - name: Comentário no PR
        if: ${{ always() && inputs['pr-report'] && github.event_name == 'pull_request' }}
        uses: domstolene/trivy-pr-report@v1
        with:
          github_token: ${{ secrets.github-token || github.token }}
          trivy_report: ${{ inputs['output-format'] == 'table' && env.TRIVY_RESULTS_FILE || env.TRIVY_PR_REPORT_FILE }}
          fail_on_severity: ${{ inputs['fail-on-severity'] }}

      - name: Falhar se vulnerabilidades encontradas
        if: ${{ inputs['exit-on-vulnerability'] && steps.analyze-findings.outputs.count != '0' }}
        run: |
          echo "Trivy encontrou vulnerabilidades com severidade configurada."
          exit 1
